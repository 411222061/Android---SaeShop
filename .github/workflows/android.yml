name: Build Signed Release APK SaeShop

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write  # Grant write permissions to allow push

jobs:
  build:
    name: Build and Sign Android Release APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Install Android SDK and tools
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk wget unzip

        # Download Android Command-line Tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip -O android-tools.zip

        # Create the required directory structure for cmdline-tools/latest
        mkdir -p android-sdk/cmdline-tools/latest
        
        # Extract the downloaded zip directly into android-sdk/cmdline-tools/latest/
        unzip android-tools.zip -d android-sdk/cmdline-tools/latest/

        # Debugging step: List contents of the directory
        echo "Listing the directory structure of android-sdk/cmdline-tools/"
        ls -R android-sdk/cmdline-tools/

        # Check if sdkmanager exists and is executable
        echo "Checking for sdkmanager in the path:"
        if [ ! -f "android-sdk/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "sdkmanager not found!"
          exit 1
        fi
        
        # Install platform tools, build tools, and Android platform (version 30)
        yes | android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
        android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "build-tools;30.0.3" "platforms;android-30"

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Decode and Verify Keystore
      env:
        KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
      run: |
        # Decode the keystore file
        echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 --decode > keystore.jks

        # Log the keystore file size for debugging
        echo "Keystore file size:"
        ls -lh keystore.jks

        # Verify keystore size and ensure it contains a valid entry
        if [ ! -s keystore.jks ]; then
          echo "Keystore file is empty or missing!"
          exit 1
        fi

        # Verify keystore contents and check the alias
        echo "Verifying keystore contents..."
        keytool -list -keystore keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" || exit 1
        keytool -list -keystore keystore.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEYSTORE_ALIAS }}" || exit 1

    - name: Sign APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
        KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
      run: |
        # Ensure that the keystore alias is valid
        echo "Signing APK with alias: $KEYSTORE_ALIAS"

        # Sign the APK
        jarsigner \
          -verbose \
          -keystore keystore.jks \
          -storepass "$KEYSTORE_PASSWORD" \
          -keypass "$KEYSTORE_KEY_PASSWORD" \
          app/build/outputs/apk/release/app-release-unsigned.apk \
          "$KEYSTORE_ALIAS"

    - name: Align APK
      run: |
        # Align the APK using zipalign
        zipalign -v -p 4 \
          app/build/outputs/apk/release/app-release-unsigned.apk \
          app/build/outputs/apk/release/app-release-signed-aligned.apk

    - name: Move APK to apk/ directory
      run: |
        mkdir -p apk
        mv app/build/outputs/apk/release/app-release-signed-aligned.apk apk/

    - name: Commit APK to repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add apk/
        git commit -m "Add Signed and Aligned APK [skip ci]"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
